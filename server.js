// server.js - Refactored with Suiet Kit integration
import express from "express";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import { jwtDecode } from "jwt-decode";
import { generateRandomness, jwtToAddress } from "@mysten/sui/zklogin";
import { isValidSuiAddress } from "@mysten/sui/utils";
import { SuiClient, getFullnodeUrl } from '@mysten/sui/client';
import { Transaction } from '@mysten/sui/transactions';
import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';

import supabase from "./supabaseClient.js";

const app = express();

// Network Configuration
const NETWORK_CONFIG = {
  current: process.env.SUI_NETWORK || 'testnet',
  devnet: 'https://fullnode.devnet.sui.io',
  testnet: 'https://fullnode.testnet.sui.io', 
  mainnet: 'https://fullnode.mainnet.sui.io'
};

// Initialize Sui Client
const suiClient = new SuiClient({ 
  url: getFullnodeUrl(NETWORK_CONFIG.current) 
});

console.log(`Connected to Sui ${NETWORK_CONFIG.current.toUpperCase()} network`);

// CORS middleware
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

app.use(bodyParser.json());

// Add request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  if (req.body && Object.keys(req.body).length > 0) {
    console.log('Request Body:', JSON.stringify(req.body, null, 2));
  }
  next();
});

const PORT = process.env.PORT || 3000;
const sessions = {}; // { state: profile }

// Helper function to check if user needs username setup
function needsUsernameSetup(profile) {
  if (!profile || !profile.name) return true;
  const isAutoGenerated = profile.name.startsWith('Player_0x') && profile.name.length <= 16;
  return isAutoGenerated;
}

// NEW: Wallet connection page with Suiet Kit integration
app.get("/wallet-connect", (req, res) => {
  const { state } = req.query;
  
  if (!state) {
    return res.status(400).send("Missing state parameter");
  }

  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Connect Your Sui Wallet</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                margin: 0;
                padding: 20px;
                min-height: 100vh;
                display: flex;
                justify-content: center;
                align-items: center;
            }
            .container {
                background: white;
                padding: 40px;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                max-width: 500px;
                width: 100%;
                text-align: center;
            }
            .title { 
                color: #333; 
                font-size: 28px; 
                margin-bottom: 20px; 
                font-weight: 600;
            }
            .subtitle {
                color: #666;
                font-size: 16px;
                margin-bottom: 30px;
                line-height: 1.5;
            }
            .status { 
                padding: 15px; 
                border-radius: 8px; 
                margin: 20px 0; 
                text-align: center; 
                font-weight: 500;
                font-size: 14px;
            }
            .success { 
                background: #d4edda; 
                color: #155724; 
                border: 1px solid #c3e6cb; 
            }
            .error { 
                background: #f8d7da; 
                color: #721c24; 
                border: 1px solid #f5c6cb; 
            }
            .info { 
                background: #d1ecf1; 
                color: #0c5460; 
                border: 1px solid #bee5eb; 
            }
            .wallet-section {
                margin: 30px 0;
                padding: 25px;
                border: 2px solid #e9ecef;
                border-radius: 12px;
                background: #f8f9fa;
            }
            .wallet-section h3 {
                margin: 0 0 20px 0;
                color: #495057;
                font-size: 18px;
            }
            .connect-button {
                background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
                color: white;
                border: none;
                padding: 16px 32px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
                width: 100%;
                margin: 10px 0;
            }
            .connect-button:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(79, 70, 229, 0.3);
            }
            .connect-button:disabled {
                background: #6c757d;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }
            .manual-input {
                width: 100%;
                padding: 12px 16px;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                font-size: 14px;
                margin: 10px 0;
                box-sizing: border-box;
                transition: border-color 0.3s ease;
            }
            .manual-input:focus {
                border-color: #4f46e5;
                outline: none;
            }
            .loading {
                display: none;
                text-align: center;
                margin: 20px 0;
            }
            .spinner {
                border: 3px solid #f3f3f3;
                border-top: 3px solid #4f46e5;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 0 auto 15px;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .divider {
                margin: 30px 0;
                text-align: center;
                position: relative;
            }
            .divider::before {
                content: '';
                position: absolute;
                top: 50%;
                left: 0;
                right: 0;
                height: 1px;
                background: #e9ecef;
            }
            .divider span {
                background: white;
                padding: 0 15px;
                color: #6c757d;
                font-size: 14px;
            }
            .wallet-connected {
                background: #d4edda !important;
                border-color: #28a745 !important;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="title">Connect Your Wallet</div>
            <div class="subtitle">Choose how you'd like to connect your Sui wallet to continue</div>
            
            <div id="status" class="status info" style="display: none;">Ready to connect</div>
            
            <!-- Suiet Kit Wallet Connection -->
            <div class="wallet-section">
                <h3>üöÄ Recommended: Use Wallet Extensions</h3>
                <p style="color: #666; font-size: 14px; margin-bottom: 20px;">
                    Connect with any installed Sui wallet extension
                </p>
                <button class="connect-button" id="suiet-connect" onclick="connectWithSuietKit()">
                    Connect Wallet
                </button>
                <div id="wallet-status" style="margin-top: 10px; font-size: 12px; color: #666;"></div>
            </div>
            
            <div class="divider">
                <span>OR</span>
            </div>
            
            <!-- Manual Connection -->
            <div class="wallet-section">
                <h3>üìù Manual Connection</h3>
                <p style="color: #666; font-size: 14px; margin-bottom: 15px;">
                    Enter your Sui wallet address directly
                </p>
                <input type="text" 
                       class="manual-input" 
                       id="manual-address" 
                       placeholder="Enter your Sui address (0x...)"
                       oninput="validateManualInput()">
                <button class="connect-button" 
                        id="manual-connect" 
                        onclick="connectManualWallet()" 
                        disabled>Connect Manual Wallet</button>
            </div>
            
            <div class="loading" id="loading">
                <div class="spinner"></div>
                <p>Connecting your wallet...</p>
            </div>
        </div>

        <!-- Suiet Kit SDK -->
        <script src="https://unpkg.com/@suiet/wallet-kit@0.2.16/dist/index.umd.js"></script>
        
        <script>
            const STATE = '${state}';
            
            // Initialize Suiet Kit
            let walletKit;
            
            // Initialize the wallet kit when page loads
            async function initSuietKit() {
                try {
                    console.log('üîß Initializing Suiet Kit...');
                    
                    // Create wallet kit instance
                    walletKit = new SuietWalletKit.WalletKit({
                        defaultWallets: [
                            // Include all major Sui wallets
                            SuietWalletKit.SuiWallet,
                            SuietWalletKit.SuietWallet,
                            SuietWalletKit.EthosWallet,
                            SuietWalletKit.GlassWallet,
                            SuietWalletKit.MartianWallet,
                            SuietWalletKit.NightlyWallet,
                            SuietWalletKit.OneKeyWallet,
                            SuietWalletKit.SafePalWallet,
                            SuietWalletKit.SpacecyWallet,
                            SuietWalletKit.SurfWallet,
                            SuietWalletKit.TokenPocketWallet,
                        ],
                        enableUnsafeBurner: false
                    });
                    
                    console.log('‚úÖ Suiet Kit initialized');
                    updateWalletStatus('Ready to connect');
                    
                } catch (error) {
                    console.error('‚ùå Suiet Kit initialization failed:', error);
                    updateWalletStatus('Initialization failed: ' + error.message);
                }
            }
            
            // Connect using Suiet Kit
            async function connectWithSuietKit() {
                console.log('üîó Starting Suiet Kit connection...');
                showLoading(true);
                
                try {
                    updateStatus('Opening wallet selection...', 'info');
                    
                    // Connect to wallet
                    await walletKit.connect();
                    
                    // Get wallet info
                    const wallet = walletKit.getWallet();
                    const account = walletKit.getAccount();
                    
                    if (!account || !account.address) {
                        throw new Error('No account found after connection');
                    }
                    
                    console.log('‚úÖ Wallet connected:', {
                        walletName: wallet?.name || 'Unknown',
                        address: account.address
                    });
                    
                    updateStatus('Wallet connected successfully!', 'success');
                    updateWalletStatus('Connected: ${wallet?.name || 'Unknown Wallet'}');
                    
                    // Submit to server
                    await submitWalletConnection({
                        walletAddress: account.address,
                        walletName: wallet?.name || 'suiet-kit',
                        signature: '',
                        message: '',
                        state: STATE,
                        publicKey: account.publicKey || ''
                    });
                    
                } catch (error) {
                    console.error('‚ùå Wallet connection failed:', error);
                    
                    if (error.message.includes('User rejected')) {
                        updateStatus('Connection cancelled by user', 'error');
                    } else if (error.message.includes('No wallet')) {
                        updateStatus('No wallet extensions found. Please install a Sui wallet.', 'error');
                    } else {
                        updateStatus('Connection failed: ' + error.message, 'error');
                    }
                    
                    showLoading(false);
                }
            }
            
            // Manual wallet connection (unchanged)
            function validateManualInput() {
                const address = document.getElementById('manual-address').value.trim();
                const button = document.getElementById('manual-connect');
                
                if (address.length >= 60 && address.startsWith('0x')) {
                    button.disabled = false;
                } else {
                    button.disabled = true;
                }
            }
            
            async function connectManualWallet() {
                const address = document.getElementById('manual-address').value.trim();
                console.log('üîó Manual wallet connection:', address);
                
                showLoading(true);
                updateStatus('Connecting manual wallet...', 'info');
                
                try {
                    await submitWalletConnection({
                        walletAddress: address,
                        walletName: 'manual',
                        signature: '',
                        message: '',
                        state: STATE
                    });
                } catch (error) {
                    console.error('‚ùå Manual wallet connection failed:', error);
                    updateStatus('Manual connection failed: ' + error.message, 'error');
                    showLoading(false);
                }
            }
            
            // Submit connection to server (updated endpoint)
            async function submitWalletConnection(data) {
                console.log('üì§ Submitting to server:', data);
                
                try {
                    const response = await fetch('/auth/wallet-connect', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    
                    const responseText = await response.text();
                    console.log('Server response:', response.status, responseText);
                    
                    if (!response.ok) {
                        throw new Error('Server error: ' + response.status + ' - ' + responseText);
                    }
                    
                    const result = JSON.parse(responseText);
                    
                    if (result.success) {
                        updateStatus('‚úÖ SUCCESS! Wallet connected successfully. You can close this window.', 'success');
                        
                        // Mark the appropriate section as connected
                        if (data.walletName !== 'manual') {
                            document.querySelector('.wallet-section').classList.add('wallet-connected');
                        }
                        
                        // Auto-close after delay
                        setTimeout(function() { 
                            try { 
                                window.close(); 
                            } catch(e) { 
                                console.log('Cannot auto-close window'); 
                            }
                        }, 2000);
                    } else {
                        throw new Error(result.error || 'Unknown error');
                    }
                    
                } catch (error) {
                    console.error('‚ùå Submit connection error:', error);
                    throw error;
                }
            }
            
            // Helper functions
            function updateStatus(message, type) {
                const statusEl = document.getElementById('status');
                statusEl.textContent = message;
                statusEl.className = 'status ' + type;
                statusEl.style.display = 'block';
                console.log('Status:', type, '-', message);
            }
            
            function updateWalletStatus(message) {
                document.getElementById('wallet-status').textContent = message;
            }
            
            function showLoading(show) {
                const loading = document.getElementById('loading');
                const connectButton = document.getElementById('suiet-connect');
                const manualButton = document.getElementById('manual-connect');
                
                if (show) {
                    loading.style.display = 'block';
                    connectButton.disabled = true;
                    manualButton.disabled = true;
                } else {
                    loading.style.display = 'none';
                    connectButton.disabled = false;
                    // Re-validate manual input
                    validateManualInput();
                }
            }
            
            // Initialize everything when page loads
            window.addEventListener('DOMContentLoaded', () => {
                console.log('üöÄ Page loaded, initializing...');
                initSuietKit();
            });
        </script>
    </body>
    </html>
  `);
});

// NEW: Unified wallet connection endpoint
app.post("/auth/wallet-connect", async (req, res) => {
  console.log("üîó Wallet connection request received");
  console.log("Request body:", JSON.stringify(req.body, null, 2));
  
  try {
    const { 
      walletAddress, 
      signature, 
      message, 
      walletName, 
      state,
      publicKey 
    } = req.body;
    
    // Basic validation
    if (!walletAddress) {
      console.log("‚ùå Missing wallet address");
      return res.status(400).json({
        success: false,
        error: "Missing wallet address"
      });
    }
    
    if (!state) {
      console.log("‚ùå Missing state parameter");
      return res.status(400).json({
        success: false,
        error: "Missing state parameter"
      });
    }
    
    // Validate Sui address format
    if (!isValidSuiAddress(walletAddress)) {
      console.log("‚ùå Invalid address format:", walletAddress);
      return res.status(400).json({
        success: false,
        error: "Invalid Sui address format"
      });
    }
    
    console.log(`‚úÖ Valid wallet address: ${walletAddress}`);
    console.log(`üîó Wallet connecting: ${walletName || 'Unknown'} - ${walletAddress}`);
    
    // Check blockchain status
    let blockchainInfo = {
      exists: false,
      balance: '0',
      hasActivity: false,
      network: NETWORK_CONFIG.current,
      error: null
    };
    
    try {
      console.log('üîó Checking blockchain status...');
      
      const balance = await suiClient.getBalance({
        owner: walletAddress,
        coinType: '0x2::sui::SUI'
      });
      
      const objects = await suiClient.getOwnedObjects({
        owner: walletAddress,
        limit: 1
      });
      
      blockchainInfo = {
        exists: true,
        balance: balance.totalBalance,
        balanceFormatted: (parseInt(balance.totalBalance) / 1_000_000_000).toFixed(4) + ' SUI',
        hasActivity: parseInt(balance.totalBalance) > 0 || objects.data.length > 0,
        network: NETWORK_CONFIG.current
      };
      
      console.log(`‚úÖ Blockchain verified:`, blockchainInfo);
      
    } catch (blockchainError) {
      console.log(`‚ö†Ô∏è Blockchain check failed: ${blockchainError.message}`);
      blockchainInfo.error = blockchainError.message;
    }
    
    // Check if user already exists
    let { data: existingProfile, error: queryError } = await supabase
      .from("user_profiles")
      .select("*")
      .eq("sui_address", walletAddress)
      .single();
    
    if (queryError && queryError.code !== 'PGRST116') {
      console.error("‚ùå Database query error:", queryError);
      return res.status(500).json({ 
        success: false,
        error: "Database query failed" 
      });
    }
    
    let finalProfile;
    let isNewUser = false;
    
    if (existingProfile) {
      console.log("‚úÖ Found existing user profile:", existingProfile.id);
      
      const { data: updated, error: updateError } = await supabase
        .from("user_profiles")
        .update({ 
          updated_at: new Date().toISOString(),
          auth_method: walletName === 'manual' ? 'manual_wallet' : 'suiet_wallet'
        })
        .eq("id", existingProfile.id)
        .select()
        .single();
        
      if (updateError) {
        console.error("‚ùå Profile update error:", updateError);
        return res.status(500).json({ 
          success: false,
          error: "Profile update failed" 
        });
      }
      
      finalProfile = updated;
      console.log("‚úÖ Existing user profile updated");
    } else {
      console.log("üÜï Creating new user profile");
      
      const tempName = `Player_${walletAddress.substring(0, 8)}`;
      
      const profileData = {
        email: null,
        google_id: null,
        name: tempName,
        picture: null,
        user_salt: null,
        sui_address: walletAddress,
        auth_method: walletName === 'manual' ? 'manual_wallet' : 'suiet_wallet',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      const { data: inserted, error: insertError } = await supabase
        .from("user_profiles")
        .insert([profileData])
        .select()
        .single();
        
      if (insertError) {
        console.error("‚ùå Profile insert error:", insertError);
        return res.status(500).json({ 
          success: false,
          error: "Profile creation failed: " + insertError.message 
        });
      }
      
      finalProfile = inserted;
      isNewUser = true;
      console.log("‚úÖ New user profile created:", finalProfile.id);
    }
    
    const needsUsername = needsUsernameSetup(finalProfile);
    console.log(`Username setup needed: ${needsUsername}`);
    
    // Create session for Unity polling
    const sessionData = {
      id: finalProfile.id,
      email: finalProfile.email,
      name: finalProfile.name,
      picture: finalProfile.picture,
      suiWallet: walletAddress,
      authMethod: walletName === 'manual' ? 'manual_wallet' : 'suiet_wallet',
      profileId: finalProfile.id,
      needsUsernameSetup: needsUsername
    };
    
    // Store session for Unity polling
    sessions[state] = sessionData;
    console.log("‚úÖ Session stored with state:", state);
    console.log("Session data:", JSON.stringify(sessionData, null, 2));
    
    const responseData = {
      success: true,
      message: isNewUser ? "New wallet connected successfully" : "Wallet reconnected successfully",
      needsUsernameSetup: needsUsername,
      blockchain: {
        verified: blockchainInfo.exists,
        balance: blockchainInfo.balance,
        balanceFormatted: blockchainInfo.balanceFormatted,
        network: blockchainInfo.network,
        error: blockchainInfo.error
      },
      profile: {
        id: finalProfile.id,
        name: finalProfile.name,
        suiWallet: walletAddress,
        authMethod: walletName === 'manual' ? 'manual_wallet' : 'suiet_wallet',
        profileId: finalProfile.id,
        needsUsernameSetup: needsUsername
      }
    };
    
    console.log("‚úÖ Sending success response:", JSON.stringify(responseData, null, 2));
    res.json(responseData);
    
  } catch (err) {
    console.error("‚ùå Wallet connection error:", err);
    res.status(500).json({ 
      success: false,
      error: "Wallet connection failed: " + err.message 
    });
  }
});

// Username setup endpoint (unchanged)
app.post("/setup-username", async (req, res) => {
  const { walletAddress, username } = req.body;
  
  try {
    if (!walletAddress || !username) {
      return res.status(400).json({
        success: false,
        error: "Wallet address and username are required"
      });
    }
    
    const trimmedUsername = username.trim();
    
    if (trimmedUsername.length < 3 || trimmedUsername.length > 20) {
      return res.status(400).json({
        success: false,
        error: "Username must be between 3 and 20 characters"
      });
    }
    
    if (!/^[a-zA-Z0-9_-]+$/.test(trimmedUsername)) {
      return res.status(400).json({
        success: false,
        error: "Username can only contain letters, numbers, underscore, and hyphen"
      });
    }
    
    const { data: existingUser, error: checkError } = await supabase
      .from("user_profiles")
      .select("id")
      .eq("name", trimmedUsername)
      .neq("sui_address", walletAddress)
      .single();
    
    if (existingUser) {
      return res.status(400).json({
        success: false,
        error: "Username already taken"
      });
    }
    
    const { data: updatedProfile, error: updateError } = await supabase
      .from("user_profiles")
      .update({ 
        name: trimmedUsername,
        updated_at: new Date().toISOString()
      })
      .eq("sui_address", walletAddress)
      .select()
      .single();
      
    if (updateError) {
      console.error("Username update error:", updateError);
      return res.status(500).json({
        success: false,
        error: "Failed to update username"
      });
    }
    
    res.json({
      success: true,
      message: "Username updated successfully",
      profile: {
        id: updatedProfile.id,
        name: updatedProfile.name,
        suiWallet: updatedProfile.sui_address,
        authMethod: updatedProfile.auth_method,
        profileId: updatedProfile.id,
        needsUsernameSetup: false
      }
    });
    
  } catch (err) {
    console.error("Username setup error:", err);
    res.status(500).json({
      success: false,
      error: "Username setup failed: " + err.message
    });
  }
});

// Google OAuth callback (unchanged)
app.get("/auth/google/callback", async (req, res) => {
    const { code, state } = req.query;
    
    if (!code) {
        console.error("No authorization code received");
        return res.status(400).send("Authorization failed - no code");
    }

    try {
        console.log("Processing Google OAuth callback...");
        
        const tokenResponse = await fetch("https://oauth2.googleapis.com/token", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: new URLSearchParams({
                code,
                client_id: process.env.GOOGLE_CLIENT_ID,
                client_secret: process.env.GOOGLE_CLIENT_SECRET,
                redirect_uri: process.env.REDIRECT_URI,
                grant_type: "authorization_code"
            })
        });

        const tokens = await tokenResponse.json();
        if (!tokens.id_token) {
            throw new Error("No ID token received");
        }

        const userInfo = jwtDecode(tokens.id_token);
        console.log("User info:", {
            sub: userInfo.sub,
            email: userInfo.email,
            name: userInfo.name
        });

        let profile;
        let isNewUser = false;

        const { data: existingProfile, error: fetchError } = await supabase
            .from("user_profiles")
            .select("*")
            .eq("google_id", userInfo.sub)
            .single();

        if (existingProfile) {
            console.log("Existing zkLogin user found - checking if username needs preservation");
            
            const hasCustomUsername = existingProfile.name && 
                                    !existingProfile.name.startsWith('Player_0x') &&
                                    existingProfile.name !== userInfo.name;
            
            console.log(`Existing name: "${existingProfile.name}"`);
            console.log(`Google name: "${userInfo.name}"`);
            console.log(`Has custom username: ${hasCustomUsername}`);
            
            const updateData = {
                updated_at: new Date().toISOString(),
                picture: userInfo.picture,
                email: userInfo.email
            };
            
            if (!hasCustomUsername) {
                updateData.name = userInfo.name;
                console.log("No custom username detected - updating name from Google profile");
            } else {
                console.log("Custom username detected - preserving existing name");
            }

            const { data: updatedProfile, error: updateError } = await supabase
                .from("user_profiles")
                .update(updateData)
                .eq("id", existingProfile.id)
                .select()
                .single();

            if (updateError) {
                console.error("Profile update error:", updateError);
                throw new Error("Profile update failed");
            }

            profile = updatedProfile;
            console.log(`Final profile name: "${profile.name}"`);
            console.log(`Retrieved existing Sui address: ${profile.sui_address}`);
            
        } else {
            console.log("New zkLogin user - creating profile");
            
            const userSalt = generateRandomness();
            const suiAddress = jwtToAddress(tokens.id_token, userSalt);
            console.log("Generated new Sui address:", suiAddress);

            const profileData = {
                email: userInfo.email,
                google_id: userInfo.sub,
                name: userInfo.name,
                picture: userInfo.picture,
                user_salt: userSalt,
                sui_address: suiAddress,
                auth_method: "zklogin",
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };

            const { data: insertedProfile, error: insertError } = await supabase
                .from("user_profiles")
                .insert([profileData])
                .select()
                .single();

            if (insertError) {
                console.error("Profile insert error:", insertError);
                throw new Error("Profile creation failed");
            }

            profile = insertedProfile;
            isNewUser = true;
        }

        const needsUsername = needsUsernameSetup(profile);

        sessions[state] = {
            id: userInfo.sub,
            email: userInfo.email,
            name: profile.name,
            picture: userInfo.picture,
            suiWallet: profile.sui_address,
            authMethod: "zklogin",
            profileId: profile.id,
            sub: userInfo.sub,
            aud: userInfo.aud,
            needsUsernameSetup: needsUsername
        };

        try {
            console.log("Checking Sui balance for zkLogin user...");
            const balance = await suiClient.getBalance({
                owner: profile.sui_address,
                coinType: '0x2::sui::SUI'
            });
            const formattedBalance = (parseInt(balance.totalBalance) / 1_000_000_000).toFixed(4);
            console.log("Sui Balance: " + formattedBalance + " SUI (" + balance.totalBalance + " MIST)");
        } catch (balanceError) {
            console.log("Could not fetch balance: " + balanceError.message + " (This is normal for new addresses)");
        }

        console.log("zkLogin successful for " + userInfo.email + " - " + (isNewUser ? 'New user created' : 'Existing user logged in'));
        
        const welcomeMessage = isNewUser ?
            "Welcome to the game, " + profile.name + "!" :
            "Welcome back, " + profile.name + "!";

        res.send(`
            <html>
            <head>
                <title>Sign In Successful</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                    .container { background: rgba(255,255,255,0.1); padding: 30px; border-radius: 10px; max-width: 500px; margin: 0 auto; }
                    .success { color: #4CAF50; font-size: 28px; margin-bottom: 20px; }
                    .info { color: #f0f0f0; margin: 15px 0; font-size: 16px; }
                    .wallet { background: rgba(0,0,0,0.2); padding: 10px; border-radius: 5px; font-family: monospace; word-break: break-all; }
                </style>
            </head>
            <body>
                <div class="container">
                    <div class="success">Sign In Successful!</div>
                    <div class="info">${welcomeMessage}</div>
                    <div class="info">Your Sui Wallet:</div>
                    <div class="wallet">${profile.sui_address}</div>
                    <div class="info" style="margin-top: 20px;">You can now close this window and return to the game.</div>
                </div>
            </body>
            </html>
        `);

    } catch (err) {
        console.error("OAuth callback error:", err);
        res.status(500).send(`
            <html>
            <head>
                <title>Authentication Failed</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f44336; color: white; }
                </style>
            </head>
            <body>
                <h1>Authentication Failed</h1>
                <p>Error: ${err.message}</p>
                <p>Please close this window and try again.</p>
            </body>
            </html>
        `);
    }
});

// Enhanced wallet validation endpoint (unchanged)
app.post("/validate-wallet", async (req, res) => {
  console.log("üîç Wallet validation request received");
  console.log("Request body:", JSON.stringify(req.body, null, 2));
  
  try {
    const { address } = req.body;
    
    if (!address) {
      console.log("‚ùå No address provided");
      return res.status(400).json({
        valid: false,
        address: null,
        message: "No wallet address provided"
      });
    }
    
    const cleanAddress = address.trim();
    console.log(`üîç Validating address: ${cleanAddress}`);
    
    const isValidFormat = isValidSuiAddress(cleanAddress);
    console.log(`Address format validation: ${isValidFormat}`);
    
    let blockchainInfo = {
      exists: false,
      balance: '0',
      hasActivity: false,
      error: null
    };
    
    if (isValidFormat) {
      try {
        console.log('üîó Checking blockchain status...');
        
        const balance = await suiClient.getBalance({
          owner: cleanAddress,
          coinType: '0x2::sui::SUI'
        });
        
        const objects = await suiClient.getOwnedObjects({
          owner: cleanAddress,
          limit: 1
        });
        
        blockchainInfo = {
          exists: true,
          balance: balance.totalBalance,
          balanceFormatted: (parseInt(balance.totalBalance) / 1_000_000_000).toFixed(4) + ' SUI',
          hasActivity: parseInt(balance.totalBalance) > 0 || objects.data.length > 0,
          network: NETWORK_CONFIG.current
        };
        
        console.log(`‚úÖ Blockchain info:`, blockchainInfo);
        
      } catch (blockchainError) {
        console.log(`‚ö†Ô∏è Blockchain check failed: ${blockchainError.message}`);
        blockchainInfo.error = blockchainError.message;
      }
    }
    
    const responseData = {
      valid: isValidFormat,
      address: cleanAddress,
      message: isValidFormat 
        ? (blockchainInfo.exists 
           ? `Valid Sui address (Balance: ${blockchainInfo.balanceFormatted})` 
           : 'Valid Sui address (Not yet active on blockchain)')
        : "Invalid Sui address format",
      blockchain: blockchainInfo,
      network: NETWORK_CONFIG.current
    };
    
    console.log("Sending validation response:", responseData);
    res.json(responseData);
    
  } catch (err) {
    console.error("Validation error:", err);
    res.status(500).json({
      valid: false,
      address: req.body?.address || null,
      message: "Server error during validation: " + err.message
    });
  }
});

// Unity polling endpoint (unchanged)
app.get("/getProfile", (req, res) => {
  const { state } = req.query;
  if (sessions[state]) {
    res.json(sessions[state]);
    delete sessions[state];
  } else {
    res.status(404).send("Not ready");
  }
});

// Health check (unchanged)
app.get("/ping", async (req, res) => {
  try {
    const chainId = await suiClient.getChainIdentifier();
    res.json({
      status: "ok",
      timestamp: new Date().toISOString(),
      message: "Server is running",
      network: NETWORK_CONFIG.current,
      chainId
    });
  } catch (err) {
    res.json({
      status: "ok",
      timestamp: new Date().toISOString(),
      message: "Server is running",
      networkError: err.message
    });
  }
});

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Connected to Sui ${NETWORK_CONFIG.current.toUpperCase()}`);
  console.log(`RPC URL: ${getFullnodeUrl(NETWORK_CONFIG.current)}`);
});