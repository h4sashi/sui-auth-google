import { SignableTransaction, SuiAddress, SuiTransactionResponse } from "@mysten/sui.js";
export interface WalletAdapter {
    name: string;
    icon?: string;
    connected: boolean;
    connecting: boolean;
    connect: () => Promise<void>;
    disconnect: () => Promise<void>;
    /**
     * Suggest a transaction for the user to sign. Supports all valid transaction types.
     */
    signAndExecuteTransaction(transaction: SignableTransaction): Promise<SuiTransactionResponse>;
    getAccounts: () => Promise<SuiAddress[]>;
}
declare type WalletAdapterProviderUnsubscribe = () => void;
/**
 * An interface that can dynamically provide wallet adapters. This is useful for
 * cases where the list of wallet adapters is dynamic.
 */
export interface WalletAdapterProvider {
    /** Get a list of wallet adapters from this provider. */
    get(): WalletAdapter[];
    /** Detect changes to the list of wallet adapters. */
    on(eventName: "changed", callback: () => void): WalletAdapterProviderUnsubscribe;
}
export declare type WalletAdapterOrProvider = WalletAdapterProvider | WalletAdapter;
export declare type WalletAdapterList = WalletAdapterOrProvider[];
export declare function isWalletAdapter(wallet: WalletAdapterOrProvider): wallet is WalletAdapter;
export declare function isWalletProvider(wallet: WalletAdapterOrProvider): wallet is WalletAdapterProvider;
/**
 * Takes an array of wallet adapters and providers, and resolves it to a
 * flat list of wallet adapters.
 */
export declare function resolveAdapters(adapterAndProviders: WalletAdapterList): WalletAdapter[];
export {};
