//src/app/api/wallet-connect/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { createServerSupabaseClient } from '@/lib/supabase'
import { isValidSuiAddress } from '@mysten/sui.js/utils'
import { SuiClient, getFullnodeUrl } from '@mysten/sui.js/client'

const suiClient = new SuiClient({ 
  url: getFullnodeUrl('testnet')
})

function needsUsernameSetup(profile: any) {
  if (!profile || !profile.name) return true
  const isAutoGenerated = profile.name.startsWith('Player_0x') && profile.name.length <= 16
  return isAutoGenerated
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { walletAddress, walletName } = body

    console.log('Wallet connection request:', { walletAddress, walletName })

    if (!walletAddress) {
      return NextResponse.json({
        success: false,
        error: 'Missing wallet address'
      }, { status: 400 })
    }

    if (!isValidSuiAddress(walletAddress)) {
      return NextResponse.json({
        success: false,
        error: 'Invalid Sui address format'
      }, { status: 400 })
    }

    // Check blockchain status
    let blockchainInfo = {
      exists: false,
      balance: '0',
      balanceFormatted: '0.0000 SUI',
      hasActivity: false,
      network: 'testnet',
      error: null
    }

    try {
      const balance = await suiClient.getBalance({
        owner: walletAddress,
        coinType: '0x2::sui::SUI'
      })

      const objects = await suiClient.getOwnedObjects({
        owner: walletAddress,
        limit: 1
      })

      blockchainInfo = {
        exists: true,
        balance: balance.totalBalance,
        balanceFormatted: (parseInt(balance.totalBalance) / 1_000_000_000).toFixed(4) + ' SUI',
        hasActivity: parseInt(balance.totalBalance) > 0 || objects.data.length > 0,
        network: 'testnet',
        error: null
      }
    } catch (blockchainError: any) {
      console.log('Blockchain check failed:', blockchainError.message)
      blockchainInfo.error = blockchainError.message
    }

    const supabase = createServerSupabaseClient()

    // Check if user already exists
    let { data: existingProfile, error: queryError } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('sui_address', walletAddress)
      .single()

    if (queryError && queryError.code !== 'PGRST116') {
      console.error('Database query error:', queryError)
      return NextResponse.json({
        success: false,
        error: 'Database query failed'
      }, { status: 500 })
    }

    let finalProfile
    let isNewUser = false

    if (existingProfile) {
      console.log('Found existing user profile:', existingProfile.id)

      const { data: updated, error: updateError } = await supabase
        .from('user_profiles')
        .update({ 
          updated_at: new Date().toISOString(),
          auth_method: 'suiet_wallet'
        })
        .eq('id', existingProfile.id)
        .select()
        .single()

      if (updateError) {
        console.error('Profile update error:', updateError)
        return NextResponse.json({
          success: false,
          error: 'Profile update failed'
        }, { status: 500 })
      }

      finalProfile = updated
    } else {
      console.log('Creating new user profile')

      const tempName = `Player_${walletAddress.substring(0, 8)}`

      const profileData = {
        email: null,
        google_id: null,
        name: tempName,
        picture: null,
        user_salt: null,
        sui_address: walletAddress,
        auth_method: 'suiet_wallet',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }

      const { data: inserted, error: insertError } = await supabase
        .from('user_profiles')
        .insert([profileData])
        .select()
        .single()

      if (insertError) {
        console.error('Profile insert error:', insertError)
        return NextResponse.json({
          success: false,
          error: 'Profile creation failed: ' + insertError.message
        }, { status: 500 })
      }

      finalProfile = inserted
      isNewUser = true
    }

    const needsUsername = needsUsernameSetup(finalProfile)

    const responseData = {
      success: true,
      message: isNewUser ? 'New wallet connected successfully' : 'Wallet reconnected successfully',
      needsUsernameSetup: needsUsername,
      blockchain: {
        verified: blockchainInfo.exists,
        balance: blockchainInfo.balance,
        balanceFormatted: blockchainInfo.balanceFormatted,
        network: blockchainInfo.network,
        error: blockchainInfo.error
      },
      profile: {
        id: finalProfile.id,
        name: finalProfile.name,
        suiWallet: walletAddress,
        authMethod: 'suiet_wallet',
        profileId: finalProfile.id,
        needsUsernameSetup: needsUsername
      }
    }

    return NextResponse.json(responseData)

  } catch (err: any) {
    console.error('Wallet connection error:', err)
    return NextResponse.json({
      success: false,
      error: 'Wallet connection failed: ' + err.message
    }, { status: 500 })
  }
}